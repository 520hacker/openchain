// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace OpenChain.Messages {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal static partial class Schema {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Schema() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxzY2hlbWEucHJvdG8SEk9wZW5DaGFpbi5NZXNzYWdlcyIbCgpCeXRlc1Zh", 
            "bHVlEg0KBXZhbHVlGAEgASgMIlUKBlJlY29yZBILCgNrZXkYASABKAwSLQoF", 
            "dmFsdWUYAiABKAsyHi5PcGVuQ2hhaW4uTWVzc2FnZXMuQnl0ZXNWYWx1ZRIP", 
            "Cgd2ZXJzaW9uGAMgASgMIlwKCE11dGF0aW9uEhEKCW5hbWVzcGFjZRgBIAEo", 
            "DBIrCgdyZWNvcmRzGAIgAygLMhouT3BlbkNoYWluLk1lc3NhZ2VzLlJlY29y", 
            "ZBIQCghtZXRhZGF0YRgDIAEoDCJQCgtUcmFuc2FjdGlvbhIQCghtdXRhdGlv", 
            "bhgBIAEoDBIRCgl0aW1lc3RhbXAYAiABKAMSHAoUdHJhbnNhY3Rpb25fbWV0", 
            "YWRhdGEYAyABKAxiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::OpenChain.Messages.BytesValue), new[]{ "Value" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::OpenChain.Messages.Record), new[]{ "Key", "Value", "Version" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::OpenChain.Messages.Mutation), new[]{ "Namespace", "Records", "Metadata" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::OpenChain.Messages.Transaction), new[]{ "Mutation", "Timestamp", "TransactionMetadata" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BytesValue : pb::IMessage<BytesValue> {
    private static readonly pb::MessageParser<BytesValue> _parser = new pb::MessageParser<BytesValue>(() => new BytesValue());
    public static pb::MessageParser<BytesValue> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenChain.Messages.Schema.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BytesValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BytesValue(BytesValue other) : this() {
      value_ = other.value_;
    }

    public BytesValue Clone() {
      return new BytesValue(this);
    }

    public const int ValueFieldNumber = 1;
    private pb::ByteString value_ = pb::ByteString.Empty;
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BytesValue);
    }

    public bool Equals(BytesValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      return size;
    }

    public void MergeFrom(BytesValue other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Record : pb::IMessage<Record> {
    private static readonly pb::MessageParser<Record> _parser = new pb::MessageParser<Record>(() => new Record());
    public static pb::MessageParser<Record> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenChain.Messages.Schema.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Record() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Record(Record other) : this() {
      key_ = other.key_;
      Value = other.value_ != null ? other.Value.Clone() : null;
      version_ = other.version_;
    }

    public Record Clone() {
      return new Record(this);
    }

    public const int KeyFieldNumber = 1;
    private pb::ByteString key_ = pb::ByteString.Empty;
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int ValueFieldNumber = 2;
    private global::OpenChain.Messages.BytesValue value_;
    public global::OpenChain.Messages.BytesValue Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public const int VersionFieldNumber = 3;
    private pb::ByteString version_ = pb::ByteString.Empty;
    public pb::ByteString Version {
      get { return version_; }
      set {
        version_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Record);
    }

    public bool Equals(Record other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (!object.Equals(Value, other.Value)) return false;
      if (Version != other.Version) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Key);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Version);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Version);
      }
      return size;
    }

    public void MergeFrom(Record other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::OpenChain.Messages.BytesValue();
        }
        Value.MergeFrom(other.Value);
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadBytes();
            break;
          }
          case 18: {
            if (value_ == null) {
              value_ = new global::OpenChain.Messages.BytesValue();
            }
            input.ReadMessage(value_);
            break;
          }
          case 26: {
            Version = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Mutation : pb::IMessage<Mutation> {
    private static readonly pb::MessageParser<Mutation> _parser = new pb::MessageParser<Mutation>(() => new Mutation());
    public static pb::MessageParser<Mutation> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenChain.Messages.Schema.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Mutation() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Mutation(Mutation other) : this() {
      namespace_ = other.namespace_;
      records_ = other.records_.Clone();
      metadata_ = other.metadata_;
    }

    public Mutation Clone() {
      return new Mutation(this);
    }

    public const int NamespaceFieldNumber = 1;
    private pb::ByteString namespace_ = pb::ByteString.Empty;
    public pb::ByteString Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int RecordsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::OpenChain.Messages.Record> _repeated_records_codec
        = pb::FieldCodec.ForMessage(18, global::OpenChain.Messages.Record.Parser);
    private readonly pbc::RepeatedField<global::OpenChain.Messages.Record> records_ = new pbc::RepeatedField<global::OpenChain.Messages.Record>();
    public pbc::RepeatedField<global::OpenChain.Messages.Record> Records {
      get { return records_; }
    }

    public const int MetadataFieldNumber = 3;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Mutation);
    }

    public bool Equals(Mutation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Namespace != other.Namespace) return false;
      if(!records_.Equals(other.records_)) return false;
      if (Metadata != other.Metadata) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      hash ^= records_.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Namespace.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Namespace);
      }
      records_.WriteTo(output, _repeated_records_codec);
      if (Metadata.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Metadata);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Namespace);
      }
      size += records_.CalculateSize(_repeated_records_codec);
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      return size;
    }

    public void MergeFrom(Mutation other) {
      if (other == null) {
        return;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      records_.Add(other.records_);
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Namespace = input.ReadBytes();
            break;
          }
          case 18: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
          case 26: {
            Metadata = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Transaction : pb::IMessage<Transaction> {
    private static readonly pb::MessageParser<Transaction> _parser = new pb::MessageParser<Transaction>(() => new Transaction());
    public static pb::MessageParser<Transaction> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenChain.Messages.Schema.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Transaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Transaction(Transaction other) : this() {
      mutation_ = other.mutation_;
      timestamp_ = other.timestamp_;
      transactionMetadata_ = other.transactionMetadata_;
    }

    public Transaction Clone() {
      return new Transaction(this);
    }

    public const int MutationFieldNumber = 1;
    private pb::ByteString mutation_ = pb::ByteString.Empty;
    public pb::ByteString Mutation {
      get { return mutation_; }
      set {
        mutation_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    public const int TransactionMetadataFieldNumber = 3;
    private pb::ByteString transactionMetadata_ = pb::ByteString.Empty;
    public pb::ByteString TransactionMetadata {
      get { return transactionMetadata_; }
      set {
        transactionMetadata_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Transaction);
    }

    public bool Equals(Transaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mutation != other.Mutation) return false;
      if (Timestamp != other.Timestamp) return false;
      if (TransactionMetadata != other.TransactionMetadata) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Mutation.Length != 0) hash ^= Mutation.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (TransactionMetadata.Length != 0) hash ^= TransactionMetadata.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Mutation.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Mutation);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Timestamp);
      }
      if (TransactionMetadata.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TransactionMetadata);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Mutation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Mutation);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (TransactionMetadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransactionMetadata);
      }
      return size;
    }

    public void MergeFrom(Transaction other) {
      if (other == null) {
        return;
      }
      if (other.Mutation.Length != 0) {
        Mutation = other.Mutation;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.TransactionMetadata.Length != 0) {
        TransactionMetadata = other.TransactionMetadata;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Mutation = input.ReadBytes();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 26: {
            TransactionMetadata = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
