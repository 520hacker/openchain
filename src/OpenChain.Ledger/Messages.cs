// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace OpenChain.Messages {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal static partial class Schema {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_OpenChain_TransactionMetadata__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::OpenChain.Messages.TransactionMetadata, global::OpenChain.Messages.TransactionMetadata.Builder> internal__static_OpenChain_TransactionMetadata__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_OpenChain_TransactionMetadata_SignatureEvidence__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence, global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence.Builder> internal__static_OpenChain_TransactionMetadata_SignatureEvidence__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Schema() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxzY2hlbWEucHJvdG8SCU9wZW5DaGFpbiKXAQoTVHJhbnNhY3Rpb25NZXRh", 
            "ZGF0YRJECgpzaWduYXR1cmVzGAEgAygLMjAuT3BlbkNoYWluLlRyYW5zYWN0", 
            "aW9uTWV0YWRhdGEuU2lnbmF0dXJlRXZpZGVuY2UaOgoRU2lnbmF0dXJlRXZp", 
          "ZGVuY2USEgoKcHVibGljX2tleRgBIAIoDBIRCglzaWduYXR1cmUYAiACKAw="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_OpenChain_TransactionMetadata__Descriptor = Descriptor.MessageTypes[0];
        internal__static_OpenChain_TransactionMetadata__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::OpenChain.Messages.TransactionMetadata, global::OpenChain.Messages.TransactionMetadata.Builder>(internal__static_OpenChain_TransactionMetadata__Descriptor,
                new string[] { "Signatures", });
        internal__static_OpenChain_TransactionMetadata_SignatureEvidence__Descriptor = internal__static_OpenChain_TransactionMetadata__Descriptor.NestedTypes[0];
        internal__static_OpenChain_TransactionMetadata_SignatureEvidence__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence, global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence.Builder>(internal__static_OpenChain_TransactionMetadata_SignatureEvidence__Descriptor,
                new string[] { "PublicKey", "Signature", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class TransactionMetadata : pb::GeneratedMessage<TransactionMetadata, TransactionMetadata.Builder> {
    private TransactionMetadata() { }
    private static readonly TransactionMetadata defaultInstance = new TransactionMetadata().MakeReadOnly();
    private static readonly string[] _transactionMetadataFieldNames = new string[] { "signatures" };
    private static readonly uint[] _transactionMetadataFieldTags = new uint[] { 10 };
    public static TransactionMetadata DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TransactionMetadata DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TransactionMetadata ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::OpenChain.Messages.Schema.internal__static_OpenChain_TransactionMetadata__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TransactionMetadata, TransactionMetadata.Builder> InternalFieldAccessors {
      get { return global::OpenChain.Messages.Schema.internal__static_OpenChain_TransactionMetadata__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      internal sealed partial class SignatureEvidence : pb::GeneratedMessage<SignatureEvidence, SignatureEvidence.Builder> {
        private SignatureEvidence() { }
        private static readonly SignatureEvidence defaultInstance = new SignatureEvidence().MakeReadOnly();
        private static readonly string[] _signatureEvidenceFieldNames = new string[] { "public_key", "signature" };
        private static readonly uint[] _signatureEvidenceFieldTags = new uint[] { 10, 18 };
        public static SignatureEvidence DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override SignatureEvidence DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override SignatureEvidence ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::OpenChain.Messages.Schema.internal__static_OpenChain_TransactionMetadata_SignatureEvidence__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<SignatureEvidence, SignatureEvidence.Builder> InternalFieldAccessors {
          get { return global::OpenChain.Messages.Schema.internal__static_OpenChain_TransactionMetadata_SignatureEvidence__FieldAccessorTable; }
        }
        
        public const int PublicKeyFieldNumber = 1;
        private bool hasPublicKey;
        private pb::ByteString publicKey_ = pb::ByteString.Empty;
        public bool HasPublicKey {
          get { return hasPublicKey; }
        }
        public pb::ByteString PublicKey {
          get { return publicKey_; }
        }
        
        public const int SignatureFieldNumber = 2;
        private bool hasSignature;
        private pb::ByteString signature_ = pb::ByteString.Empty;
        public bool HasSignature {
          get { return hasSignature; }
        }
        public pb::ByteString Signature {
          get { return signature_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasPublicKey) return false;
            if (!hasSignature) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _signatureEvidenceFieldNames;
          if (hasPublicKey) {
            output.WriteBytes(1, field_names[0], PublicKey);
          }
          if (hasSignature) {
            output.WriteBytes(2, field_names[1], Signature);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasPublicKey) {
            size += pb::CodedOutputStream.ComputeBytesSize(1, PublicKey);
          }
          if (hasSignature) {
            size += pb::CodedOutputStream.ComputeBytesSize(2, Signature);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static SignatureEvidence ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SignatureEvidence ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SignatureEvidence ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SignatureEvidence ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SignatureEvidence ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SignatureEvidence ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static SignatureEvidence ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static SignatureEvidence ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static SignatureEvidence ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SignatureEvidence ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private SignatureEvidence MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(SignatureEvidence prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal sealed partial class Builder : pb::GeneratedBuilder<SignatureEvidence, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(SignatureEvidence cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private SignatureEvidence result;
          
          private SignatureEvidence PrepareBuilder() {
            if (resultIsReadOnly) {
              SignatureEvidence original = result;
              result = new SignatureEvidence();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override SignatureEvidence MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence.Descriptor; }
          }
          
          public override SignatureEvidence DefaultInstanceForType {
            get { return global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence.DefaultInstance; }
          }
          
          public override SignatureEvidence BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is SignatureEvidence) {
              return MergeFrom((SignatureEvidence) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(SignatureEvidence other) {
            if (other == global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasPublicKey) {
              PublicKey = other.PublicKey;
            }
            if (other.HasSignature) {
              Signature = other.Signature;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_signatureEvidenceFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _signatureEvidenceFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasPublicKey = input.ReadBytes(ref result.publicKey_);
                  break;
                }
                case 18: {
                  result.hasSignature = input.ReadBytes(ref result.signature_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasPublicKey {
            get { return result.hasPublicKey; }
          }
          public pb::ByteString PublicKey {
            get { return result.PublicKey; }
            set { SetPublicKey(value); }
          }
          public Builder SetPublicKey(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasPublicKey = true;
            result.publicKey_ = value;
            return this;
          }
          public Builder ClearPublicKey() {
            PrepareBuilder();
            result.hasPublicKey = false;
            result.publicKey_ = pb::ByteString.Empty;
            return this;
          }
          
          public bool HasSignature {
            get { return result.hasSignature; }
          }
          public pb::ByteString Signature {
            get { return result.Signature; }
            set { SetSignature(value); }
          }
          public Builder SetSignature(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSignature = true;
            result.signature_ = value;
            return this;
          }
          public Builder ClearSignature() {
            PrepareBuilder();
            result.hasSignature = false;
            result.signature_ = pb::ByteString.Empty;
            return this;
          }
        }
        static SignatureEvidence() {
          object.ReferenceEquals(global::OpenChain.Messages.Schema.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int SignaturesFieldNumber = 1;
    private pbc::PopsicleList<global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence> signatures_ = new pbc::PopsicleList<global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence>();
    public scg::IList<global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence> SignaturesList {
      get { return signatures_; }
    }
    public int SignaturesCount {
      get { return signatures_.Count; }
    }
    public global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence GetSignatures(int index) {
      return signatures_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence element in SignaturesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _transactionMetadataFieldNames;
      if (signatures_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], signatures_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence element in SignaturesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TransactionMetadata ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TransactionMetadata ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TransactionMetadata ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TransactionMetadata ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TransactionMetadata ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TransactionMetadata ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TransactionMetadata ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TransactionMetadata ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TransactionMetadata ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TransactionMetadata ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TransactionMetadata MakeReadOnly() {
      signatures_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TransactionMetadata prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<TransactionMetadata, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TransactionMetadata cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TransactionMetadata result;
      
      private TransactionMetadata PrepareBuilder() {
        if (resultIsReadOnly) {
          TransactionMetadata original = result;
          result = new TransactionMetadata();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TransactionMetadata MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::OpenChain.Messages.TransactionMetadata.Descriptor; }
      }
      
      public override TransactionMetadata DefaultInstanceForType {
        get { return global::OpenChain.Messages.TransactionMetadata.DefaultInstance; }
      }
      
      public override TransactionMetadata BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TransactionMetadata) {
          return MergeFrom((TransactionMetadata) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TransactionMetadata other) {
        if (other == global::OpenChain.Messages.TransactionMetadata.DefaultInstance) return this;
        PrepareBuilder();
        if (other.signatures_.Count != 0) {
          result.signatures_.Add(other.signatures_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_transactionMetadataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _transactionMetadataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.signatures_, global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence> SignaturesList {
        get { return PrepareBuilder().signatures_; }
      }
      public int SignaturesCount {
        get { return result.SignaturesCount; }
      }
      public global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence GetSignatures(int index) {
        return result.GetSignatures(index);
      }
      public Builder SetSignatures(int index, global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.signatures_[index] = value;
        return this;
      }
      public Builder SetSignatures(int index, global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.signatures_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSignatures(global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.signatures_.Add(value);
        return this;
      }
      public Builder AddSignatures(global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.signatures_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSignatures(scg::IEnumerable<global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence> values) {
        PrepareBuilder();
        result.signatures_.Add(values);
        return this;
      }
      public Builder ClearSignatures() {
        PrepareBuilder();
        result.signatures_.Clear();
        return this;
      }
    }
    static TransactionMetadata() {
      object.ReferenceEquals(global::OpenChain.Messages.Schema.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
