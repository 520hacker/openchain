// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace OpenChain.Messages {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal static partial class Schema {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Schema() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxzY2hlbWEucHJvdG8SCU9wZW5DaGFpbiKXAQoTVHJhbnNhY3Rpb25NZXRh", 
            "ZGF0YRJECgpzaWduYXR1cmVzGAEgAygLMjAuT3BlbkNoYWluLlRyYW5zYWN0", 
            "aW9uTWV0YWRhdGEuU2lnbmF0dXJlRXZpZGVuY2UaOgoRU2lnbmF0dXJlRXZp", 
            "ZGVuY2USEgoKcHVibGljX2tleRgBIAEoDBIRCglzaWduYXR1cmUYAiABKAxi", 
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::OpenChain.Messages.TransactionMetadata), new[]{ "Signatures" }, null, null, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence), new[]{ "PublicKey", "Signature" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class TransactionMetadata : pb::IMessage<TransactionMetadata> {
    private static readonly pb::MessageParser<TransactionMetadata> _parser = new pb::MessageParser<TransactionMetadata>(() => new TransactionMetadata());
    public static pb::MessageParser<TransactionMetadata> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenChain.Messages.Schema.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TransactionMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TransactionMetadata(TransactionMetadata other) : this() {
      signatures_ = other.signatures_.Clone();
    }

    public TransactionMetadata Clone() {
      return new TransactionMetadata(this);
    }

    public const int SignaturesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence> _repeated_signatures_codec
        = pb::FieldCodec.ForMessage(10, global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence.Parser);
    private readonly pbc::RepeatedField<global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence> signatures_ = new pbc::RepeatedField<global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence>();
    public pbc::RepeatedField<global::OpenChain.Messages.TransactionMetadata.Types.SignatureEvidence> Signatures {
      get { return signatures_; }
    }

    public override bool Equals(object other) {
      return Equals(other as TransactionMetadata);
    }

    public bool Equals(TransactionMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!signatures_.Equals(other.signatures_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= signatures_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      signatures_.WriteTo(output, _repeated_signatures_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += signatures_.CalculateSize(_repeated_signatures_codec);
      return size;
    }

    public void MergeFrom(TransactionMetadata other) {
      if (other == null) {
        return;
      }
      signatures_.Add(other.signatures_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            signatures_.AddEntriesFrom(input, _repeated_signatures_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      internal sealed partial class SignatureEvidence : pb::IMessage<SignatureEvidence> {
        private static readonly pb::MessageParser<SignatureEvidence> _parser = new pb::MessageParser<SignatureEvidence>(() => new SignatureEvidence());
        public static pb::MessageParser<SignatureEvidence> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenChain.Messages.TransactionMetadata.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public SignatureEvidence() {
          OnConstruction();
        }

        partial void OnConstruction();

        public SignatureEvidence(SignatureEvidence other) : this() {
          publicKey_ = other.publicKey_;
          signature_ = other.signature_;
        }

        public SignatureEvidence Clone() {
          return new SignatureEvidence(this);
        }

        public const int PublicKeyFieldNumber = 1;
        private pb::ByteString publicKey_ = pb::ByteString.Empty;
        public pb::ByteString PublicKey {
          get { return publicKey_; }
          set {
            publicKey_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        public const int SignatureFieldNumber = 2;
        private pb::ByteString signature_ = pb::ByteString.Empty;
        public pb::ByteString Signature {
          get { return signature_; }
          set {
            signature_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        public override bool Equals(object other) {
          return Equals(other as SignatureEvidence);
        }

        public bool Equals(SignatureEvidence other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PublicKey != other.PublicKey) return false;
          if (Signature != other.Signature) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
          if (Signature.Length != 0) hash ^= Signature.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (PublicKey.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(PublicKey);
          }
          if (Signature.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(Signature);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (PublicKey.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
          }
          if (Signature.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
          }
          return size;
        }

        public void MergeFrom(SignatureEvidence other) {
          if (other == null) {
            return;
          }
          if (other.PublicKey.Length != 0) {
            PublicKey = other.PublicKey;
          }
          if (other.Signature.Length != 0) {
            Signature = other.Signature;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                PublicKey = input.ReadBytes();
                break;
              }
              case 18: {
                Signature = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
