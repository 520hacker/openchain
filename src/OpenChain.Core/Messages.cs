// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace OpenChain.Messages {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal static partial class Schema {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_OpenChain_Mutation__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::OpenChain.Messages.Mutation, global::OpenChain.Messages.Mutation.Builder> internal__static_OpenChain_Mutation__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_OpenChain_Mutation_KeyValuePair__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::OpenChain.Messages.Mutation.Types.KeyValuePair, global::OpenChain.Messages.Mutation.Types.KeyValuePair.Builder> internal__static_OpenChain_Mutation_KeyValuePair__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_OpenChain_Transaction__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::OpenChain.Messages.Transaction, global::OpenChain.Messages.Transaction.Builder> internal__static_OpenChain_Transaction__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Schema() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxzY2hlbWEucHJvdG8SCU9wZW5DaGFpbiKnAQoITXV0YXRpb24SEQoJbmFt", 
            "ZXNwYWNlGAEgAigMEjkKD2tleV92YWx1ZV9wYWlycxgCIAMoCzIgLk9wZW5D", 
            "aGFpbi5NdXRhdGlvbi5LZXlWYWx1ZVBhaXISEAoIbWV0YWRhdGEYAyACKAwa", 
            "OwoMS2V5VmFsdWVQYWlyEgsKA2tleRgBIAIoDBINCgV2YWx1ZRgCIAIoDBIP", 
            "Cgd2ZXJzaW9uGAMgAigMIlAKC1RyYW5zYWN0aW9uEhAKCG11dGF0aW9uGAEg", 
            "AigMEhEKCXRpbWVzdGFtcBgCIAIoAxIcChR0cmFuc2FjdGlvbl9tZXRhZGF0", 
          "YRgDIAIoDA=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_OpenChain_Mutation__Descriptor = Descriptor.MessageTypes[0];
        internal__static_OpenChain_Mutation__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::OpenChain.Messages.Mutation, global::OpenChain.Messages.Mutation.Builder>(internal__static_OpenChain_Mutation__Descriptor,
                new string[] { "Namespace", "KeyValuePairs", "Metadata", });
        internal__static_OpenChain_Mutation_KeyValuePair__Descriptor = internal__static_OpenChain_Mutation__Descriptor.NestedTypes[0];
        internal__static_OpenChain_Mutation_KeyValuePair__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::OpenChain.Messages.Mutation.Types.KeyValuePair, global::OpenChain.Messages.Mutation.Types.KeyValuePair.Builder>(internal__static_OpenChain_Mutation_KeyValuePair__Descriptor,
                new string[] { "Key", "Value", "Version", });
        internal__static_OpenChain_Transaction__Descriptor = Descriptor.MessageTypes[1];
        internal__static_OpenChain_Transaction__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::OpenChain.Messages.Transaction, global::OpenChain.Messages.Transaction.Builder>(internal__static_OpenChain_Transaction__Descriptor,
                new string[] { "Mutation", "Timestamp", "TransactionMetadata", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Mutation : pb::GeneratedMessage<Mutation, Mutation.Builder> {
    private Mutation() { }
    private static readonly Mutation defaultInstance = new Mutation().MakeReadOnly();
    private static readonly string[] _mutationFieldNames = new string[] { "key_value_pairs", "metadata", "namespace" };
    private static readonly uint[] _mutationFieldTags = new uint[] { 18, 26, 10 };
    public static Mutation DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Mutation DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Mutation ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::OpenChain.Messages.Schema.internal__static_OpenChain_Mutation__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Mutation, Mutation.Builder> InternalFieldAccessors {
      get { return global::OpenChain.Messages.Schema.internal__static_OpenChain_Mutation__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      internal sealed partial class KeyValuePair : pb::GeneratedMessage<KeyValuePair, KeyValuePair.Builder> {
        private KeyValuePair() { }
        private static readonly KeyValuePair defaultInstance = new KeyValuePair().MakeReadOnly();
        private static readonly string[] _keyValuePairFieldNames = new string[] { "key", "value", "version" };
        private static readonly uint[] _keyValuePairFieldTags = new uint[] { 10, 18, 26 };
        public static KeyValuePair DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override KeyValuePair DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override KeyValuePair ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::OpenChain.Messages.Schema.internal__static_OpenChain_Mutation_KeyValuePair__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<KeyValuePair, KeyValuePair.Builder> InternalFieldAccessors {
          get { return global::OpenChain.Messages.Schema.internal__static_OpenChain_Mutation_KeyValuePair__FieldAccessorTable; }
        }
        
        public const int KeyFieldNumber = 1;
        private bool hasKey;
        private pb::ByteString key_ = pb::ByteString.Empty;
        public bool HasKey {
          get { return hasKey; }
        }
        public pb::ByteString Key {
          get { return key_; }
        }
        
        public const int ValueFieldNumber = 2;
        private bool hasValue;
        private pb::ByteString value_ = pb::ByteString.Empty;
        public bool HasValue {
          get { return hasValue; }
        }
        public pb::ByteString Value {
          get { return value_; }
        }
        
        public const int VersionFieldNumber = 3;
        private bool hasVersion;
        private pb::ByteString version_ = pb::ByteString.Empty;
        public bool HasVersion {
          get { return hasVersion; }
        }
        public pb::ByteString Version {
          get { return version_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasKey) return false;
            if (!hasValue) return false;
            if (!hasVersion) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _keyValuePairFieldNames;
          if (hasKey) {
            output.WriteBytes(1, field_names[0], Key);
          }
          if (hasValue) {
            output.WriteBytes(2, field_names[1], Value);
          }
          if (hasVersion) {
            output.WriteBytes(3, field_names[2], Version);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasKey) {
            size += pb::CodedOutputStream.ComputeBytesSize(1, Key);
          }
          if (hasValue) {
            size += pb::CodedOutputStream.ComputeBytesSize(2, Value);
          }
          if (hasVersion) {
            size += pb::CodedOutputStream.ComputeBytesSize(3, Version);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static KeyValuePair ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static KeyValuePair ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static KeyValuePair ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static KeyValuePair ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static KeyValuePair ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static KeyValuePair ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static KeyValuePair ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static KeyValuePair ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static KeyValuePair ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static KeyValuePair ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private KeyValuePair MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(KeyValuePair prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal sealed partial class Builder : pb::GeneratedBuilder<KeyValuePair, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(KeyValuePair cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private KeyValuePair result;
          
          private KeyValuePair PrepareBuilder() {
            if (resultIsReadOnly) {
              KeyValuePair original = result;
              result = new KeyValuePair();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override KeyValuePair MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::OpenChain.Messages.Mutation.Types.KeyValuePair.Descriptor; }
          }
          
          public override KeyValuePair DefaultInstanceForType {
            get { return global::OpenChain.Messages.Mutation.Types.KeyValuePair.DefaultInstance; }
          }
          
          public override KeyValuePair BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is KeyValuePair) {
              return MergeFrom((KeyValuePair) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(KeyValuePair other) {
            if (other == global::OpenChain.Messages.Mutation.Types.KeyValuePair.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasKey) {
              Key = other.Key;
            }
            if (other.HasValue) {
              Value = other.Value;
            }
            if (other.HasVersion) {
              Version = other.Version;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_keyValuePairFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _keyValuePairFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasKey = input.ReadBytes(ref result.key_);
                  break;
                }
                case 18: {
                  result.hasValue = input.ReadBytes(ref result.value_);
                  break;
                }
                case 26: {
                  result.hasVersion = input.ReadBytes(ref result.version_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasKey {
            get { return result.hasKey; }
          }
          public pb::ByteString Key {
            get { return result.Key; }
            set { SetKey(value); }
          }
          public Builder SetKey(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasKey = true;
            result.key_ = value;
            return this;
          }
          public Builder ClearKey() {
            PrepareBuilder();
            result.hasKey = false;
            result.key_ = pb::ByteString.Empty;
            return this;
          }
          
          public bool HasValue {
            get { return result.hasValue; }
          }
          public pb::ByteString Value {
            get { return result.Value; }
            set { SetValue(value); }
          }
          public Builder SetValue(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasValue = true;
            result.value_ = value;
            return this;
          }
          public Builder ClearValue() {
            PrepareBuilder();
            result.hasValue = false;
            result.value_ = pb::ByteString.Empty;
            return this;
          }
          
          public bool HasVersion {
            get { return result.hasVersion; }
          }
          public pb::ByteString Version {
            get { return result.Version; }
            set { SetVersion(value); }
          }
          public Builder SetVersion(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasVersion = true;
            result.version_ = value;
            return this;
          }
          public Builder ClearVersion() {
            PrepareBuilder();
            result.hasVersion = false;
            result.version_ = pb::ByteString.Empty;
            return this;
          }
        }
        static KeyValuePair() {
          object.ReferenceEquals(global::OpenChain.Messages.Schema.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int NamespaceFieldNumber = 1;
    private bool hasNamespace;
    private pb::ByteString namespace_ = pb::ByteString.Empty;
    public bool HasNamespace {
      get { return hasNamespace; }
    }
    public pb::ByteString Namespace {
      get { return namespace_; }
    }
    
    public const int KeyValuePairsFieldNumber = 2;
    private pbc::PopsicleList<global::OpenChain.Messages.Mutation.Types.KeyValuePair> keyValuePairs_ = new pbc::PopsicleList<global::OpenChain.Messages.Mutation.Types.KeyValuePair>();
    public scg::IList<global::OpenChain.Messages.Mutation.Types.KeyValuePair> KeyValuePairsList {
      get { return keyValuePairs_; }
    }
    public int KeyValuePairsCount {
      get { return keyValuePairs_.Count; }
    }
    public global::OpenChain.Messages.Mutation.Types.KeyValuePair GetKeyValuePairs(int index) {
      return keyValuePairs_[index];
    }
    
    public const int MetadataFieldNumber = 3;
    private bool hasMetadata;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    public bool HasMetadata {
      get { return hasMetadata; }
    }
    public pb::ByteString Metadata {
      get { return metadata_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasNamespace) return false;
        if (!hasMetadata) return false;
        foreach (global::OpenChain.Messages.Mutation.Types.KeyValuePair element in KeyValuePairsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mutationFieldNames;
      if (hasNamespace) {
        output.WriteBytes(1, field_names[2], Namespace);
      }
      if (keyValuePairs_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], keyValuePairs_);
      }
      if (hasMetadata) {
        output.WriteBytes(3, field_names[1], Metadata);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasNamespace) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, Namespace);
      }
      foreach (global::OpenChain.Messages.Mutation.Types.KeyValuePair element in KeyValuePairsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      if (hasMetadata) {
        size += pb::CodedOutputStream.ComputeBytesSize(3, Metadata);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Mutation ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Mutation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Mutation ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Mutation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Mutation ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Mutation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Mutation ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Mutation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Mutation ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Mutation ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Mutation MakeReadOnly() {
      keyValuePairs_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Mutation prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<Mutation, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Mutation cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Mutation result;
      
      private Mutation PrepareBuilder() {
        if (resultIsReadOnly) {
          Mutation original = result;
          result = new Mutation();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Mutation MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::OpenChain.Messages.Mutation.Descriptor; }
      }
      
      public override Mutation DefaultInstanceForType {
        get { return global::OpenChain.Messages.Mutation.DefaultInstance; }
      }
      
      public override Mutation BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Mutation) {
          return MergeFrom((Mutation) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Mutation other) {
        if (other == global::OpenChain.Messages.Mutation.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNamespace) {
          Namespace = other.Namespace;
        }
        if (other.keyValuePairs_.Count != 0) {
          result.keyValuePairs_.Add(other.keyValuePairs_);
        }
        if (other.HasMetadata) {
          Metadata = other.Metadata;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mutationFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mutationFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasNamespace = input.ReadBytes(ref result.namespace_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.keyValuePairs_, global::OpenChain.Messages.Mutation.Types.KeyValuePair.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              result.hasMetadata = input.ReadBytes(ref result.metadata_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasNamespace {
        get { return result.hasNamespace; }
      }
      public pb::ByteString Namespace {
        get { return result.Namespace; }
        set { SetNamespace(value); }
      }
      public Builder SetNamespace(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNamespace = true;
        result.namespace_ = value;
        return this;
      }
      public Builder ClearNamespace() {
        PrepareBuilder();
        result.hasNamespace = false;
        result.namespace_ = pb::ByteString.Empty;
        return this;
      }
      
      public pbc::IPopsicleList<global::OpenChain.Messages.Mutation.Types.KeyValuePair> KeyValuePairsList {
        get { return PrepareBuilder().keyValuePairs_; }
      }
      public int KeyValuePairsCount {
        get { return result.KeyValuePairsCount; }
      }
      public global::OpenChain.Messages.Mutation.Types.KeyValuePair GetKeyValuePairs(int index) {
        return result.GetKeyValuePairs(index);
      }
      public Builder SetKeyValuePairs(int index, global::OpenChain.Messages.Mutation.Types.KeyValuePair value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.keyValuePairs_[index] = value;
        return this;
      }
      public Builder SetKeyValuePairs(int index, global::OpenChain.Messages.Mutation.Types.KeyValuePair.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.keyValuePairs_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddKeyValuePairs(global::OpenChain.Messages.Mutation.Types.KeyValuePair value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.keyValuePairs_.Add(value);
        return this;
      }
      public Builder AddKeyValuePairs(global::OpenChain.Messages.Mutation.Types.KeyValuePair.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.keyValuePairs_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeKeyValuePairs(scg::IEnumerable<global::OpenChain.Messages.Mutation.Types.KeyValuePair> values) {
        PrepareBuilder();
        result.keyValuePairs_.Add(values);
        return this;
      }
      public Builder ClearKeyValuePairs() {
        PrepareBuilder();
        result.keyValuePairs_.Clear();
        return this;
      }
      
      public bool HasMetadata {
        get { return result.hasMetadata; }
      }
      public pb::ByteString Metadata {
        get { return result.Metadata; }
        set { SetMetadata(value); }
      }
      public Builder SetMetadata(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMetadata = true;
        result.metadata_ = value;
        return this;
      }
      public Builder ClearMetadata() {
        PrepareBuilder();
        result.hasMetadata = false;
        result.metadata_ = pb::ByteString.Empty;
        return this;
      }
    }
    static Mutation() {
      object.ReferenceEquals(global::OpenChain.Messages.Schema.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Transaction : pb::GeneratedMessage<Transaction, Transaction.Builder> {
    private Transaction() { }
    private static readonly Transaction defaultInstance = new Transaction().MakeReadOnly();
    private static readonly string[] _transactionFieldNames = new string[] { "mutation", "timestamp", "transaction_metadata" };
    private static readonly uint[] _transactionFieldTags = new uint[] { 10, 16, 26 };
    public static Transaction DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Transaction DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Transaction ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::OpenChain.Messages.Schema.internal__static_OpenChain_Transaction__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Transaction, Transaction.Builder> InternalFieldAccessors {
      get { return global::OpenChain.Messages.Schema.internal__static_OpenChain_Transaction__FieldAccessorTable; }
    }
    
    public const int MutationFieldNumber = 1;
    private bool hasMutation;
    private pb::ByteString mutation_ = pb::ByteString.Empty;
    public bool HasMutation {
      get { return hasMutation; }
    }
    public pb::ByteString Mutation {
      get { return mutation_; }
    }
    
    public const int TimestampFieldNumber = 2;
    private bool hasTimestamp;
    private long timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public long Timestamp {
      get { return timestamp_; }
    }
    
    public const int TransactionMetadataFieldNumber = 3;
    private bool hasTransactionMetadata;
    private pb::ByteString transactionMetadata_ = pb::ByteString.Empty;
    public bool HasTransactionMetadata {
      get { return hasTransactionMetadata; }
    }
    public pb::ByteString TransactionMetadata {
      get { return transactionMetadata_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMutation) return false;
        if (!hasTimestamp) return false;
        if (!hasTransactionMetadata) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _transactionFieldNames;
      if (hasMutation) {
        output.WriteBytes(1, field_names[0], Mutation);
      }
      if (hasTimestamp) {
        output.WriteInt64(2, field_names[1], Timestamp);
      }
      if (hasTransactionMetadata) {
        output.WriteBytes(3, field_names[2], TransactionMetadata);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMutation) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, Mutation);
      }
      if (hasTimestamp) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, Timestamp);
      }
      if (hasTransactionMetadata) {
        size += pb::CodedOutputStream.ComputeBytesSize(3, TransactionMetadata);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Transaction ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Transaction ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Transaction ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Transaction ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Transaction ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Transaction ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Transaction ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Transaction ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Transaction ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Transaction ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Transaction MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Transaction prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<Transaction, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Transaction cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Transaction result;
      
      private Transaction PrepareBuilder() {
        if (resultIsReadOnly) {
          Transaction original = result;
          result = new Transaction();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Transaction MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::OpenChain.Messages.Transaction.Descriptor; }
      }
      
      public override Transaction DefaultInstanceForType {
        get { return global::OpenChain.Messages.Transaction.DefaultInstance; }
      }
      
      public override Transaction BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Transaction) {
          return MergeFrom((Transaction) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Transaction other) {
        if (other == global::OpenChain.Messages.Transaction.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMutation) {
          Mutation = other.Mutation;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasTransactionMetadata) {
          TransactionMetadata = other.TransactionMetadata;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_transactionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _transactionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMutation = input.ReadBytes(ref result.mutation_);
              break;
            }
            case 16: {
              result.hasTimestamp = input.ReadInt64(ref result.timestamp_);
              break;
            }
            case 26: {
              result.hasTransactionMetadata = input.ReadBytes(ref result.transactionMetadata_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMutation {
        get { return result.hasMutation; }
      }
      public pb::ByteString Mutation {
        get { return result.Mutation; }
        set { SetMutation(value); }
      }
      public Builder SetMutation(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMutation = true;
        result.mutation_ = value;
        return this;
      }
      public Builder ClearMutation() {
        PrepareBuilder();
        result.hasMutation = false;
        result.mutation_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public long Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(long value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
      
      public bool HasTransactionMetadata {
        get { return result.hasTransactionMetadata; }
      }
      public pb::ByteString TransactionMetadata {
        get { return result.TransactionMetadata; }
        set { SetTransactionMetadata(value); }
      }
      public Builder SetTransactionMetadata(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTransactionMetadata = true;
        result.transactionMetadata_ = value;
        return this;
      }
      public Builder ClearTransactionMetadata() {
        PrepareBuilder();
        result.hasTransactionMetadata = false;
        result.transactionMetadata_ = pb::ByteString.Empty;
        return this;
      }
    }
    static Transaction() {
      object.ReferenceEquals(global::OpenChain.Messages.Schema.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
