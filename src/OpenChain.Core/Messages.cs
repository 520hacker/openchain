// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace OpenChain.Messages {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal static partial class Schema {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_OpenChain_Transaction__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::OpenChain.Messages.Transaction, global::OpenChain.Messages.Transaction.Builder> internal__static_OpenChain_Transaction__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_OpenChain_Transaction_AccountEntry__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::OpenChain.Messages.Transaction.Types.AccountEntry, global::OpenChain.Messages.Transaction.Types.AccountEntry.Builder> internal__static_OpenChain_Transaction_AccountEntry__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_OpenChain_LedgerRecord__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::OpenChain.Messages.LedgerRecord, global::OpenChain.Messages.LedgerRecord.Builder> internal__static_OpenChain_LedgerRecord__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Schema() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxzY2hlbWEucHJvdG8SCU9wZW5DaGFpbiKuAQoLVHJhbnNhY3Rpb24SPAoP", 
            "YWNjb3VudF9lbnRyaWVzGAEgAygLMiMuT3BlbkNoYWluLlRyYW5zYWN0aW9u", 
            "LkFjY291bnRFbnRyeRIQCghtZXRhZGF0YRgCIAIoDBpPCgxBY2NvdW50RW50", 
            "cnkSDwoHYWNjb3VudBgBIAIoCRINCgVhc3NldBgCIAIoCRIOCgZhbW91bnQY", 
            "AyACKBISDwoHdmVyc2lvbhgEIAIoDCJLCgxMZWRnZXJSZWNvcmQSDwoHcGF5", 
            "bG9hZBgBIAIoDBIRCgl0aW1lc3RhbXAYAiACKAMSFwoPcmVjb3JkX21ldGFk", 
          "YXRhGAMgAigM"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_OpenChain_Transaction__Descriptor = Descriptor.MessageTypes[0];
        internal__static_OpenChain_Transaction__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::OpenChain.Messages.Transaction, global::OpenChain.Messages.Transaction.Builder>(internal__static_OpenChain_Transaction__Descriptor,
                new string[] { "AccountEntries", "Metadata", });
        internal__static_OpenChain_Transaction_AccountEntry__Descriptor = internal__static_OpenChain_Transaction__Descriptor.NestedTypes[0];
        internal__static_OpenChain_Transaction_AccountEntry__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::OpenChain.Messages.Transaction.Types.AccountEntry, global::OpenChain.Messages.Transaction.Types.AccountEntry.Builder>(internal__static_OpenChain_Transaction_AccountEntry__Descriptor,
                new string[] { "Account", "Asset", "Amount", "Version", });
        internal__static_OpenChain_LedgerRecord__Descriptor = Descriptor.MessageTypes[1];
        internal__static_OpenChain_LedgerRecord__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::OpenChain.Messages.LedgerRecord, global::OpenChain.Messages.LedgerRecord.Builder>(internal__static_OpenChain_LedgerRecord__Descriptor,
                new string[] { "Payload", "Timestamp", "RecordMetadata", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class Transaction : pb::GeneratedMessage<Transaction, Transaction.Builder> {
    private Transaction() { }
    private static readonly Transaction defaultInstance = new Transaction().MakeReadOnly();
    private static readonly string[] _transactionFieldNames = new string[] { "account_entries", "metadata" };
    private static readonly uint[] _transactionFieldTags = new uint[] { 10, 18 };
    public static Transaction DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Transaction DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Transaction ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::OpenChain.Messages.Schema.internal__static_OpenChain_Transaction__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Transaction, Transaction.Builder> InternalFieldAccessors {
      get { return global::OpenChain.Messages.Schema.internal__static_OpenChain_Transaction__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      internal sealed partial class AccountEntry : pb::GeneratedMessage<AccountEntry, AccountEntry.Builder> {
        private AccountEntry() { }
        private static readonly AccountEntry defaultInstance = new AccountEntry().MakeReadOnly();
        private static readonly string[] _accountEntryFieldNames = new string[] { "account", "amount", "asset", "version" };
        private static readonly uint[] _accountEntryFieldTags = new uint[] { 10, 24, 18, 34 };
        public static AccountEntry DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override AccountEntry DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override AccountEntry ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::OpenChain.Messages.Schema.internal__static_OpenChain_Transaction_AccountEntry__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<AccountEntry, AccountEntry.Builder> InternalFieldAccessors {
          get { return global::OpenChain.Messages.Schema.internal__static_OpenChain_Transaction_AccountEntry__FieldAccessorTable; }
        }
        
        public const int AccountFieldNumber = 1;
        private bool hasAccount;
        private string account_ = "";
        public bool HasAccount {
          get { return hasAccount; }
        }
        public string Account {
          get { return account_; }
        }
        
        public const int AssetFieldNumber = 2;
        private bool hasAsset;
        private string asset_ = "";
        public bool HasAsset {
          get { return hasAsset; }
        }
        public string Asset {
          get { return asset_; }
        }
        
        public const int AmountFieldNumber = 3;
        private bool hasAmount;
        private long amount_;
        public bool HasAmount {
          get { return hasAmount; }
        }
        public long Amount {
          get { return amount_; }
        }
        
        public const int VersionFieldNumber = 4;
        private bool hasVersion;
        private pb::ByteString version_ = pb::ByteString.Empty;
        public bool HasVersion {
          get { return hasVersion; }
        }
        public pb::ByteString Version {
          get { return version_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasAccount) return false;
            if (!hasAsset) return false;
            if (!hasAmount) return false;
            if (!hasVersion) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _accountEntryFieldNames;
          if (hasAccount) {
            output.WriteString(1, field_names[0], Account);
          }
          if (hasAsset) {
            output.WriteString(2, field_names[2], Asset);
          }
          if (hasAmount) {
            output.WriteSInt64(3, field_names[1], Amount);
          }
          if (hasVersion) {
            output.WriteBytes(4, field_names[3], Version);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasAccount) {
            size += pb::CodedOutputStream.ComputeStringSize(1, Account);
          }
          if (hasAsset) {
            size += pb::CodedOutputStream.ComputeStringSize(2, Asset);
          }
          if (hasAmount) {
            size += pb::CodedOutputStream.ComputeSInt64Size(3, Amount);
          }
          if (hasVersion) {
            size += pb::CodedOutputStream.ComputeBytesSize(4, Version);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static AccountEntry ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AccountEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AccountEntry ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AccountEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AccountEntry ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AccountEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static AccountEntry ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static AccountEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static AccountEntry ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AccountEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private AccountEntry MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(AccountEntry prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal sealed partial class Builder : pb::GeneratedBuilder<AccountEntry, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(AccountEntry cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private AccountEntry result;
          
          private AccountEntry PrepareBuilder() {
            if (resultIsReadOnly) {
              AccountEntry original = result;
              result = new AccountEntry();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override AccountEntry MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::OpenChain.Messages.Transaction.Types.AccountEntry.Descriptor; }
          }
          
          public override AccountEntry DefaultInstanceForType {
            get { return global::OpenChain.Messages.Transaction.Types.AccountEntry.DefaultInstance; }
          }
          
          public override AccountEntry BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is AccountEntry) {
              return MergeFrom((AccountEntry) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(AccountEntry other) {
            if (other == global::OpenChain.Messages.Transaction.Types.AccountEntry.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasAccount) {
              Account = other.Account;
            }
            if (other.HasAsset) {
              Asset = other.Asset;
            }
            if (other.HasAmount) {
              Amount = other.Amount;
            }
            if (other.HasVersion) {
              Version = other.Version;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_accountEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _accountEntryFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasAccount = input.ReadString(ref result.account_);
                  break;
                }
                case 18: {
                  result.hasAsset = input.ReadString(ref result.asset_);
                  break;
                }
                case 24: {
                  result.hasAmount = input.ReadSInt64(ref result.amount_);
                  break;
                }
                case 34: {
                  result.hasVersion = input.ReadBytes(ref result.version_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasAccount {
            get { return result.hasAccount; }
          }
          public string Account {
            get { return result.Account; }
            set { SetAccount(value); }
          }
          public Builder SetAccount(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasAccount = true;
            result.account_ = value;
            return this;
          }
          public Builder ClearAccount() {
            PrepareBuilder();
            result.hasAccount = false;
            result.account_ = "";
            return this;
          }
          
          public bool HasAsset {
            get { return result.hasAsset; }
          }
          public string Asset {
            get { return result.Asset; }
            set { SetAsset(value); }
          }
          public Builder SetAsset(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasAsset = true;
            result.asset_ = value;
            return this;
          }
          public Builder ClearAsset() {
            PrepareBuilder();
            result.hasAsset = false;
            result.asset_ = "";
            return this;
          }
          
          public bool HasAmount {
            get { return result.hasAmount; }
          }
          public long Amount {
            get { return result.Amount; }
            set { SetAmount(value); }
          }
          public Builder SetAmount(long value) {
            PrepareBuilder();
            result.hasAmount = true;
            result.amount_ = value;
            return this;
          }
          public Builder ClearAmount() {
            PrepareBuilder();
            result.hasAmount = false;
            result.amount_ = 0;
            return this;
          }
          
          public bool HasVersion {
            get { return result.hasVersion; }
          }
          public pb::ByteString Version {
            get { return result.Version; }
            set { SetVersion(value); }
          }
          public Builder SetVersion(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasVersion = true;
            result.version_ = value;
            return this;
          }
          public Builder ClearVersion() {
            PrepareBuilder();
            result.hasVersion = false;
            result.version_ = pb::ByteString.Empty;
            return this;
          }
        }
        static AccountEntry() {
          object.ReferenceEquals(global::OpenChain.Messages.Schema.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int AccountEntriesFieldNumber = 1;
    private pbc::PopsicleList<global::OpenChain.Messages.Transaction.Types.AccountEntry> accountEntries_ = new pbc::PopsicleList<global::OpenChain.Messages.Transaction.Types.AccountEntry>();
    public scg::IList<global::OpenChain.Messages.Transaction.Types.AccountEntry> AccountEntriesList {
      get { return accountEntries_; }
    }
    public int AccountEntriesCount {
      get { return accountEntries_.Count; }
    }
    public global::OpenChain.Messages.Transaction.Types.AccountEntry GetAccountEntries(int index) {
      return accountEntries_[index];
    }
    
    public const int MetadataFieldNumber = 2;
    private bool hasMetadata;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    public bool HasMetadata {
      get { return hasMetadata; }
    }
    public pb::ByteString Metadata {
      get { return metadata_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMetadata) return false;
        foreach (global::OpenChain.Messages.Transaction.Types.AccountEntry element in AccountEntriesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _transactionFieldNames;
      if (accountEntries_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], accountEntries_);
      }
      if (hasMetadata) {
        output.WriteBytes(2, field_names[1], Metadata);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::OpenChain.Messages.Transaction.Types.AccountEntry element in AccountEntriesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      if (hasMetadata) {
        size += pb::CodedOutputStream.ComputeBytesSize(2, Metadata);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Transaction ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Transaction ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Transaction ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Transaction ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Transaction ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Transaction ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Transaction ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Transaction ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Transaction ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Transaction ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Transaction MakeReadOnly() {
      accountEntries_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Transaction prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<Transaction, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Transaction cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Transaction result;
      
      private Transaction PrepareBuilder() {
        if (resultIsReadOnly) {
          Transaction original = result;
          result = new Transaction();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Transaction MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::OpenChain.Messages.Transaction.Descriptor; }
      }
      
      public override Transaction DefaultInstanceForType {
        get { return global::OpenChain.Messages.Transaction.DefaultInstance; }
      }
      
      public override Transaction BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Transaction) {
          return MergeFrom((Transaction) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Transaction other) {
        if (other == global::OpenChain.Messages.Transaction.DefaultInstance) return this;
        PrepareBuilder();
        if (other.accountEntries_.Count != 0) {
          result.accountEntries_.Add(other.accountEntries_);
        }
        if (other.HasMetadata) {
          Metadata = other.Metadata;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_transactionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _transactionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.accountEntries_, global::OpenChain.Messages.Transaction.Types.AccountEntry.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              result.hasMetadata = input.ReadBytes(ref result.metadata_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::OpenChain.Messages.Transaction.Types.AccountEntry> AccountEntriesList {
        get { return PrepareBuilder().accountEntries_; }
      }
      public int AccountEntriesCount {
        get { return result.AccountEntriesCount; }
      }
      public global::OpenChain.Messages.Transaction.Types.AccountEntry GetAccountEntries(int index) {
        return result.GetAccountEntries(index);
      }
      public Builder SetAccountEntries(int index, global::OpenChain.Messages.Transaction.Types.AccountEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.accountEntries_[index] = value;
        return this;
      }
      public Builder SetAccountEntries(int index, global::OpenChain.Messages.Transaction.Types.AccountEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.accountEntries_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAccountEntries(global::OpenChain.Messages.Transaction.Types.AccountEntry value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.accountEntries_.Add(value);
        return this;
      }
      public Builder AddAccountEntries(global::OpenChain.Messages.Transaction.Types.AccountEntry.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.accountEntries_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAccountEntries(scg::IEnumerable<global::OpenChain.Messages.Transaction.Types.AccountEntry> values) {
        PrepareBuilder();
        result.accountEntries_.Add(values);
        return this;
      }
      public Builder ClearAccountEntries() {
        PrepareBuilder();
        result.accountEntries_.Clear();
        return this;
      }
      
      public bool HasMetadata {
        get { return result.hasMetadata; }
      }
      public pb::ByteString Metadata {
        get { return result.Metadata; }
        set { SetMetadata(value); }
      }
      public Builder SetMetadata(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMetadata = true;
        result.metadata_ = value;
        return this;
      }
      public Builder ClearMetadata() {
        PrepareBuilder();
        result.hasMetadata = false;
        result.metadata_ = pb::ByteString.Empty;
        return this;
      }
    }
    static Transaction() {
      object.ReferenceEquals(global::OpenChain.Messages.Schema.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class LedgerRecord : pb::GeneratedMessage<LedgerRecord, LedgerRecord.Builder> {
    private LedgerRecord() { }
    private static readonly LedgerRecord defaultInstance = new LedgerRecord().MakeReadOnly();
    private static readonly string[] _ledgerRecordFieldNames = new string[] { "payload", "record_metadata", "timestamp" };
    private static readonly uint[] _ledgerRecordFieldTags = new uint[] { 10, 26, 16 };
    public static LedgerRecord DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LedgerRecord DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LedgerRecord ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::OpenChain.Messages.Schema.internal__static_OpenChain_LedgerRecord__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LedgerRecord, LedgerRecord.Builder> InternalFieldAccessors {
      get { return global::OpenChain.Messages.Schema.internal__static_OpenChain_LedgerRecord__FieldAccessorTable; }
    }
    
    public const int PayloadFieldNumber = 1;
    private bool hasPayload;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    public bool HasPayload {
      get { return hasPayload; }
    }
    public pb::ByteString Payload {
      get { return payload_; }
    }
    
    public const int TimestampFieldNumber = 2;
    private bool hasTimestamp;
    private long timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public long Timestamp {
      get { return timestamp_; }
    }
    
    public const int RecordMetadataFieldNumber = 3;
    private bool hasRecordMetadata;
    private pb::ByteString recordMetadata_ = pb::ByteString.Empty;
    public bool HasRecordMetadata {
      get { return hasRecordMetadata; }
    }
    public pb::ByteString RecordMetadata {
      get { return recordMetadata_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPayload) return false;
        if (!hasTimestamp) return false;
        if (!hasRecordMetadata) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _ledgerRecordFieldNames;
      if (hasPayload) {
        output.WriteBytes(1, field_names[0], Payload);
      }
      if (hasTimestamp) {
        output.WriteInt64(2, field_names[2], Timestamp);
      }
      if (hasRecordMetadata) {
        output.WriteBytes(3, field_names[1], RecordMetadata);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPayload) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, Payload);
      }
      if (hasTimestamp) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, Timestamp);
      }
      if (hasRecordMetadata) {
        size += pb::CodedOutputStream.ComputeBytesSize(3, RecordMetadata);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static LedgerRecord ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LedgerRecord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LedgerRecord ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LedgerRecord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LedgerRecord ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LedgerRecord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LedgerRecord ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LedgerRecord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LedgerRecord ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LedgerRecord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LedgerRecord MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LedgerRecord prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<LedgerRecord, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LedgerRecord cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LedgerRecord result;
      
      private LedgerRecord PrepareBuilder() {
        if (resultIsReadOnly) {
          LedgerRecord original = result;
          result = new LedgerRecord();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LedgerRecord MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::OpenChain.Messages.LedgerRecord.Descriptor; }
      }
      
      public override LedgerRecord DefaultInstanceForType {
        get { return global::OpenChain.Messages.LedgerRecord.DefaultInstance; }
      }
      
      public override LedgerRecord BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LedgerRecord) {
          return MergeFrom((LedgerRecord) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LedgerRecord other) {
        if (other == global::OpenChain.Messages.LedgerRecord.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPayload) {
          Payload = other.Payload;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasRecordMetadata) {
          RecordMetadata = other.RecordMetadata;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ledgerRecordFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ledgerRecordFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPayload = input.ReadBytes(ref result.payload_);
              break;
            }
            case 16: {
              result.hasTimestamp = input.ReadInt64(ref result.timestamp_);
              break;
            }
            case 26: {
              result.hasRecordMetadata = input.ReadBytes(ref result.recordMetadata_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPayload {
        get { return result.hasPayload; }
      }
      public pb::ByteString Payload {
        get { return result.Payload; }
        set { SetPayload(value); }
      }
      public Builder SetPayload(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPayload = true;
        result.payload_ = value;
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.hasPayload = false;
        result.payload_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public long Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(long value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
      
      public bool HasRecordMetadata {
        get { return result.hasRecordMetadata; }
      }
      public pb::ByteString RecordMetadata {
        get { return result.RecordMetadata; }
        set { SetRecordMetadata(value); }
      }
      public Builder SetRecordMetadata(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRecordMetadata = true;
        result.recordMetadata_ = value;
        return this;
      }
      public Builder ClearRecordMetadata() {
        PrepareBuilder();
        result.hasRecordMetadata = false;
        result.recordMetadata_ = pb::ByteString.Empty;
        return this;
      }
    }
    static LedgerRecord() {
      object.ReferenceEquals(global::OpenChain.Messages.Schema.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
